import os
import logging
import asyncio
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from aiogram.filters import Command
from aiogram.enums.chat_action import ChatAction

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_FAST_MODEL = os.getenv("GEMINI_FAST_MODEL", "models/gemini-2.0-pro-exp-02-05")
GEMINI_SMART_MODEL = os.getenv("GEMINI_SMART_MODEL", "models/gemini-2.0-flash-thinking-exp-1219")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID"))  # –î–æ–±–∞–≤–∏–º –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google AI
genai.configure(api_key=GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI")],
        [KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å"), KeyboardButton(text="üß† –£–º–Ω–∞—è –º–æ–¥–µ–ª—å")]
    ],
    resize_keyboard=True
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
user_model_choice = GEMINI_FAST_MODEL

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
last_requests = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API
def get_gemini_response(prompt: str, model_name: str) -> str:
    try:
        print(f"–ó–∞–ø—Ä–æ—Å –∫ Gemini API. –ú–æ–¥–µ–ª—å: {model_name}, –ó–∞–ø—Ä–æ—Å: {prompt}")
        model = genai.GenerativeModel(model_name)
        response = model.generate_content(prompt)
        if response.text:
            return response.text
        else:
            logging.warning(f"Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –∏ –∑–∞–ø—Ä–æ—Å–∞: {prompt}")
            return "–û—à–∏–±–∫–∞: AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini ({model_name}): {e}, –ó–∞–ø—Ä–æ—Å: {prompt}, –û—à–∏–±–∫–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å AI Gemini. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.message(lambda message: message.text in ["‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å", "üß† –£–º–Ω–∞—è –º–æ–¥–µ–ª—å"])
async def choose_model(message: types.Message):
    global user_model_choice
    if message.text == "‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å":
        user_model_choice = GEMINI_FAST_MODEL
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ ‚ö° –ë—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å (–Ω–µ–º–Ω–æ–≥–æ —Ç—É–ø–µ–µ, –Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ).")
    else:
        user_model_choice = GEMINI_SMART_MODEL
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ üß† –£–º–Ω—É—é –º–æ–¥–µ–ª—å (–æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —É–º–Ω–µ–µ).")
    print(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {user_model_choice}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    print("–§—É–Ω–∫—Ü–∏—è handle_message –≤—ã–∑–≤–∞–Ω–∞")
    user_text = message.text
    await bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫
    last_requests.append(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.full_name}: {user_text}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
    if len(last_requests) > 10:
        last_requests.pop(0)

    ai_response = get_gemini_response(user_text, user_model_choice)
    await message.answer(ai_response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(Command(commands=['last_requests']))
async def show_last_requests(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        if last_requests:
            response = "\n".join(last_requests)
        else:
            response = "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n{response}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
